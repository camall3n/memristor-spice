res.c – Sets up containers to keep track of the parameters that apply to resistors. The RESpTable[] lists “parameters” (which are instance-dependent), and the RESmPTable[] lists “model parameters” (which are the same for all resistors defined by a particular model). Both make liberal use of macros defined in “src/include/devdefs.h”.
resask.c – Defines the function RESask, which can query a resistor for any of its parameters.
resdefs.h – “Definitions used to describe resistors.” Defines a struct sRESinstance (which holds information about a single instance) and a struct sRESmodel (which holds information about all resistors of a certain model).
resdel.c – Defines the function RESdelete, which looks up a particular resistor instance by model and name, and then deletes it.
resdest.c – Defines the function RESdestroy, which frees all resistors that are instances of a particular model.
resext.h – Declares a whole bunch of functions for resistors. This file is ‘#include‘d by “resdefs.h”, which in turn is ‘#include‘d by most (if not all) of the resistor implementation files.
resitf.h – Defines a struct RESinfo, which looks like it contains a bunch of resistor function pointers.
resload.c – “Actually load the current resistance value into the sparse matrix previously provided.” Not really sure yet, this one might need to be compared with other circuit elements. It seems related to actually solving for circuit quantities numerically.
resmask.c – Defines the function RESmodAsk, which can query a resistor model for any of its parameters.
resmdel.c – Defines the function RESmDelete, which looks up a particular resistor model, deletes any resistors that are instances of it, and then deletes the model itself.
resmpar.c – Defines the function RESmParam, which sets parameter values for a resistor model.
resnoise.c – Defines the function RESnoise, which "names and evaluates all of the noise sources associated with resistors. It starts with the model *firstModel and traverses all of its instances. It then proceeds to any other models on the linked list. The total output noise density generated by all the resistors is summed in the variable “OnDens”."
resparam.c – Defines the function RESparam, which sets parameter values for resistor instances.
respzld.c – “Actually load the current resistance value into the sparse matrix previously provided.” Same explanation as for “resload.c”. Still not really sure what it does.
ressacl.c – “Actually load the current ac sensitivity info into the array previously provided.”
ressetup.c – “Load the resistor structure with those pointers needed later for fast matrix loading.”
ressload.c – “Actually load the current resistance sensitivity value into the array previously provided.” [These are starting to get repetitive…]
ressprt.c – “Pretty print the sensitivity info for all the resistors in the circuit.”
ressset.c – “Loop through all the devices and assign parameter #s to design parameters.” Related to “sensitivity” (whatever that means).
restemp.c – Defines the function REStemp, which "performs the temperature update to the resistors. calculates the conductance as a function of the given nominal and current temperatures. The resistance given in the struct is the nominal temperature resistance."